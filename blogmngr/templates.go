package blogmngr

import (
	"fmt"
	"os"
	"bytes"
	"text/template"
	"io/ioutil"
	"strings"
)

type P map[string]interface{}

const indexTemplate = `<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Blog</title>
</head>
<body>
  <h1>Blog</h1>
  <hr>
  <ul>
    {{.entries}}
  </ul>
  <hr>
  <small>- <a href="rss.xml">RSS</a> -</small>
</body>
</html>
`

const postTemplate = `<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>{{.title}}</title>
</head>
<body>
  <h1>{{.title}}</h1>
  <hr>
  <p>
    <small>{{.date}}</small>
  </p>
  {{.content}}
  <hr>
  <small>- <a href="index.html">home</a> -</small>
</body>
</html>
`

const rssTemplate = `<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
  <title>Blog</title>
  <link><![CDATA[{{.link}}]]></link>
  <description>Generated by nob</description>
  {{.entries}}
</channel>
</rss>
`

const RssArticle = `  <item>
    <title><![CDATA[{{.title}}]]></title>
    <link><![CDATA[{{.link}}]]></link>
    <description><![CDATA[{{.desc}}]]></description>
  </item>
`

const EntryLi = `<li><a href="%s">%s</a> <small>%s</small>
`

func CreateTemplates(templatesdir string, siteUrl string) {
	indexFile := fmt.Sprintf("%s/index.html", templatesdir)
	postFile := fmt.Sprintf("%s/post.html", templatesdir)
	rssFile := fmt.Sprintf("%s/rss.xml", templatesdir)
	linkFile := fmt.Sprintf("%s/my_blog_link.txt", templatesdir)
	var templates = map[string]string {
		indexFile: indexTemplate,
		postFile: postTemplate,
		rssFile: rssTemplate,
	}

	for tpath, content := range templates {
		f, _ := os.OpenFile(tpath, os.O_CREATE | os.O_WRONLY | os.O_APPEND, 0600)
		f.WriteString(content)
		f.Close()
	}

	f, _ := os.OpenFile(linkFile, os.O_CREATE | os.O_WRONLY | os.O_TRUNC, 0600)
	f.WriteString(siteUrl)
	f.Close()
}

// TODO refactor this
func GetWebsiteURL() string {
	cwd, _ := os.Getwd()
	linkPath := fmt.Sprintf("%s/.nob/templates/my_blog_link.txt", cwd)
	f, _ := ioutil.ReadFile(linkPath)
	return strings.Replace(string(f), "\n", "", -1)
}

func ReadTemplateFile(fname string) string {
	cwd, _ := os.Getwd()
	templatePath := fmt.Sprintf("%s/.nob/templates/%s", cwd, fname)
	f, _ := ioutil.ReadFile(templatePath)
	return string(f)
}

func WriteToStatic(fname string, content string) {
	cwd, _ := os.Getwd()
	staticPath := fmt.Sprintf("%s/%s", cwd, fname)
	f, _ := os.OpenFile(staticPath, os.O_CREATE | os.O_WRONLY | os.O_TRUNC, 0600)
	f.WriteString(content)
	f.Close()
}

func FmtTemplate(format string, p P) string {
	b := &bytes.Buffer{}
	template.Must(template.New("").Parse(format)).Execute(b, p)
	return b.String()
}

